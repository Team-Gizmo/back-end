"Gizmo"

Business Problems:

  1. Clients call the Help Desk for issues that repeat over and over, e.g. missing Learning Essentials tile, where a root cause may never be fully investigated or investigated at all.
  2. Developers on support rotation solve a problem that some other developer on support rotation just solved.  This wastes the developer's time, and the client's time in waiting for a resolution.

Potential Solution:

  Create an INC tracker (web based) that categorizes problems at a more granular, and FLEX-specific level than does ServiceNow


Summary:

  Categorize a ticket by keywords, e.g. LMS, W2CHECK, HRO toggle, Web132C, FSA, etc., and store the INC number along with those keywords (max of three keywords permitted per INC)
  The next time an "LMS" issue arises, the keyword(s) can be specified and (hopefully) an existing solution can be retrieved

PROS:
  The "Solution" to the ticket can also be stored under that INC number and therefore retrieved by keyword
  In addition to the keyword search, each column in the table display for all INC's will be searchable per the ag-Grid
  All INC's that have something to do with "LMS" can be displayed at one time
  Should help to reduce developer frustration and time during INC rotation: previously solved INC's can be used as a basis for finding a solution for new INC's with the same problem
  Should help to reduce client frustration since INC's can be solved faster
  Over time, a pattern (per keyword) may emerge as to the root cause, which could lead to a fix in the data and/or code
  The use of ag-Grid will allow updates/deletes to be made per INC without having to click a "Save" button - just tabbing off the field will persist the value

CONS:
  Creating the association between an INC and its keyword(s) will be a manual operation
  The keywords that best describe an INC will be determined by the person currently on rotation, therefore it will be a subjective process
  No direct interface to ServiceNow to pull additional data.  Working with Bob LaTorre to see if ServiceNow provides any REST endpoints for querying.


Approach to designing the INC Tracker application: three C's will be considered - Coupling, Cohesion, and Cost.


Coupling

  Attempting to achieve: LOW
    Each module will exist and can change independent of all other modules
    Minimize developers stepping on each others toes during development
    Minimize merge conflicts
    Back-end can be used to serve x number of interfaces simultaneously
    Front-end can switch between back-end modules with minimal configuration changes, i.e. modify only the url and port for the REST endpoints

  Strategy to achieve that goal:

    Other than additions/deletions/data modifications to REST endpoints, changes to the front-end will result in no changes needed in the back-end.

    The front-end's knowledge that a back-end module exists is limited to a URL and Port number being specified in the front-end's code base.
    
    Conversely, the back-end module will have zero knowledge that a front-end module exists.  To reinforce that, there will be no class names that mimic ts/js names which might indicate a hard link if the two codes bases are compared
    
    References to the persistence module will NOT hard-coded into the app, but instead change based on which application server the back-end is deployed.  For example, if the application is deployed to:

      WebLogic, Payara, GlassFish: uses EclipseLink
      TomEE, WebSphere, Geronimo: uses OpenJPA
      WildFly: uses Hibernate
      etc.

    NOTE: there is no need to import Spring dependencies since the back-end code is written as a minimalistic Jakarta EE application (few dependencies -> small war file -> fast start-up).  As long as the code is deployed to an EE compliant application server (e.g. WebLogic, Payara, WildFly, TomEE, GlassFish, etc), it will function as designed


Cohesion

  Attempting to achieve: HIGH (each element within each module does its own thing - promotes robustness, reliability, re-usability, and understandability)

  Strategy to achieve that goal:

    The BCE (Boundary-Control-Entity) standard will be used to structure back-end code packages into specific business responsibilities.  This strategy helps eliminate the practice of packaging code by technical responsibility.

    A "*Resource" class (within the Boundary directory) will be the interface to the outside world for a specific business need

    A "*Manager" class (also within the Boundary directory) will contain the business logic just for that "*Resource" interface and will be @Injected into the Resource.

    Persistence entities (@Entity annotated classes) will be packaged by business needs and not contained within a single directory.  Since their creation is for a specific business function, each one will be tied to a *Resource class in the applicable Boundary layer.  To avoid potential duplication of effort, each will also be available via import... to whatever other business function may have a need.

    To promote the low coupling concept from a developer standpoint, the front-end and back-end codes bases will be (1) in separate GIT projects, and (2) developed using different IDE's.


Cost

  Attempting to achieve: NONE

  Technologies used to achieve that goal:

    Web server: NG Live Development Server (file changes cause an automatic server refresh)
    Application Server: WildFly (JBoss)
    RDMS: Postgresql 9.6
    Web to application server interface: RESTful
    IDE's: Eclipse, and Visual Studio Code
    Angular 4
    ag-Grid 8.1
    Typescript 2.3.2
    Dependency mgr: Maven
    Persistence auditing: EntityListeners (javax.persistence.EntityListeners) which provide automatic auditing of CRUD operations (INSERT/DELETE/UPDATE) without the expense or complexity of third-party software/hardware.
    Testing platforms: Postman and cURL
    
  Cost of all proposed technologies: $0.00